// Mocks generated by Mockito 5.1.0 from annotations
// in e_commerce_desafio/test/presentation/page-navigator/screens/market/widget/product_grid_item_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:typed_data' as _i7;

import 'package:file/file.dart' as _i4;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i5;
import 'package:flutter_cache_manager/src/cache_store.dart' as _i2;
import 'package:flutter_cache_manager/src/web/web_helper.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCacheStore_0 extends _i1.Fake implements _i2.CacheStore {}

class _FakeWebHelper_1 extends _i1.Fake implements _i3.WebHelper {}

class _FakeFile_2 extends _i1.Fake implements _i4.File {}

class _FakeFileInfo_3 extends _i1.Fake implements _i5.FileInfo {}

/// A class which mocks [DefaultCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDefaultCacheManager extends _i1.Mock
    implements _i5.DefaultCacheManager {
  MockDefaultCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CacheStore get store => (super.noSuchMethod(Invocation.getter(#store),
      returnValue: _FakeCacheStore_0()) as _i2.CacheStore);
  @override
  _i3.WebHelper get webHelper =>
      (super.noSuchMethod(Invocation.getter(#webHelper),
          returnValue: _FakeWebHelper_1()) as _i3.WebHelper);
  @override
  _i6.Future<_i4.File> getSingleFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getSingleFile, [url], {#key: key, #headers: headers}),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i6.Future<_i4.File>);
  @override
  _i6.Stream<_i5.FileInfo> getFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#getFile, [url], {#key: key, #headers: headers}),
          returnValue:
              Stream<_i5.FileInfo>.empty()) as _i6.Stream<_i5.FileInfo>);
  @override
  _i6.Stream<_i5.FileResponse> getFileStream(String? url,
          {String? key,
          Map<String, String>? headers,
          bool? withProgress = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getFileStream, [url],
                  {#key: key, #headers: headers, #withProgress: withProgress}),
              returnValue: Stream<_i5.FileResponse>.empty())
          as _i6.Stream<_i5.FileResponse>);
  @override
  _i6.Future<_i5.FileInfo> downloadFile(String? url,
          {String? key,
          Map<String, String>? authHeaders,
          bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadFile, [url],
                  {#key: key, #authHeaders: authHeaders, #force: force}),
              returnValue: Future<_i5.FileInfo>.value(_FakeFileInfo_3()))
          as _i6.Future<_i5.FileInfo>);
  @override
  _i6.Future<_i5.FileInfo?> getFileFromCache(String? key,
          {bool? ignoreMemCache = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFileFromCache, [key], {#ignoreMemCache: ignoreMemCache}),
              returnValue: Future<_i5.FileInfo?>.value())
          as _i6.Future<_i5.FileInfo?>);
  @override
  _i6.Future<_i5.FileInfo?> getFileFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFileFromMemory, [key]),
              returnValue: Future<_i5.FileInfo?>.value())
          as _i6.Future<_i5.FileInfo?>);
  @override
  _i6.Future<_i4.File> putFile(String? url, _i7.Uint8List? fileBytes,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFile, [
                url,
                fileBytes
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i6.Future<_i4.File>);
  @override
  _i6.Future<_i4.File> putFileStream(String? url, _i6.Stream<List<int>>? source,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFileStream, [
                url,
                source
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i6.Future<_i4.File>);
  @override
  _i6.Future<void> removeFile(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeFile, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> emptyCache() =>
      (super.noSuchMethod(Invocation.method(#emptyCache, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Stream<_i5.FileResponse> getImageFile(String? url,
          {String? key,
          Map<String, String>? headers,
          bool? withProgress = false,
          int? maxHeight,
          int? maxWidth}) =>
      (super.noSuchMethod(
              Invocation.method(#getImageFile, [
                url
              ], {
                #key: key,
                #headers: headers,
                #withProgress: withProgress,
                #maxHeight: maxHeight,
                #maxWidth: maxWidth
              }),
              returnValue: Stream<_i5.FileResponse>.empty())
          as _i6.Stream<_i5.FileResponse>);
}
